from django.shortcuts import render, render_to_response, RequestContext
from django.http import HttpResponse, HttpResponseRedirect, Http404
from django.core.urlresolvers import reverse
from django.contrib.auth import authenticate, login, logout, get_user
from django.contrib.auth.decorators import login_required, user_passes_test
from django.forms.models import model_to_dict
from datetime import date
from datetime import datetime
from django.utils import timezone
from filetransfers.api import prepare_upload
from forms import *
from django.shortcuts import get_object_or_404
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from PeerReviewApp.models import *
from PeerReviewApp.forms import *
from uuid import uuid4
import json


def handle_reviewer_uploads(request):
    ''' Method for dealing with the reviewer's uploaded review document '''
    upload_dir = date.today().strftime(settings.REVIEW_DOC_PATH)
    upload_full_path = os.path.join(settings.MEDIA_ROOT, upload_dir)

    if not os.path.exists(upload_full_path):
        os.makedirs(upload_full_path)

    # Get  first uploaded file
    upload = request.FILES.getlist('file')[0]

    ext = upload.name.split('.')[-1]

    fname = str(uuid4()) + ext
    dest = open(os.path.join(upload_full_path, fname), 'wb')

    for chunk in upload.chunks():
        dest.write(chunk)
    dest.close()
    return (upload.name, os.path.join(upload_dir, fname))


def handle_uploads(request):
    ''' Method for dealing with uploaded files '''
    saved = []
    upload_dir = date.today().strftime(settings.UPLOAD_PATH)
    upload_full_path = os.path.join(settings.MEDIA_ROOT, upload_dir)

    if not os.path.exists(upload_full_path):
        os.makedirs(upload_full_path)

    for upload in request.FILES.getlist('file'):
        # Ensure file uploads are unique
        ext = upload.name.split('.')[-1]
        fname = str(uuid4()) + ext
        dest = open(os.path.join(upload_full_path, fname), 'wb')
        for chunk in upload.chunks():
            dest.write(chunk)
        dest.close()
        saved.append((upload.name, os.path.join(upload_dir, fname)))
    return saved


def get_current_review_period():
    r = ReviewPeriod.objects.filter(is_current=True)
    if r.count() > 0:
        return r[0];
    else:
        return False

def is_normal_user_(user):
	if user.is_site_admin:
		return False
	else:
		return True




def is_normal_user_check(user):
    if user.is_authenticated():
        if user.is_site_admin:
            return False
        else:
            return True
    else:
        return False


def index(request):
    ''' Main landing page '''
    context = {}
    return render(request, 'index.html', context)

def about(request):
    return render(request, 'about.html', {})

def help(request):
    return render(request,'help.html',{})

def terms(request):
    ''' Terms of service agreement '''
    context = {}
    return render(request, 'terms.html', context)

def auth_login(request):
    context = {}
    context['next'] = request.GET.get('next', False)
    if request.method == 'POST':
        form = LoginForm(request.POST)
    else:
        form = LoginForm()
    if form.is_valid() and 'email' in form.cleaned_data and 'password' in form.cleaned_data:
        print 'hit 2'
        user = authenticate(username=form.cleaned_data['email'], password=form.cleaned_data['password'])
        if user is not None:
            login(request, user)
            if request.POST.get('next', False):
                return HttpResponseRedirect(request.POST.get('next', False))
            else:
                return HttpResponseRedirect(reverse('index'))  # Redirect to homepage when the user logs in
        else:
            context['errors'] = 'Authentication failed.'
    context['form'] = form
    return render_to_response('login.html', context, context_instance=RequestContext(request))


def signup(request):
    context = {}
    if request.method == 'POST':
        form = SignupForm(request.POST)
    else:
        form = SignupForm()
    if form.is_valid():
        context['form'] = form
        # Passwords don't match
        if form.cleaned_data['password'] != form.cleaned_data['retype_password']:
            context['errors'] = 'The passwords you entered do not match.'
            return render(request, 'signup.html', context)

        # Not an Emory email address
        if form.cleaned_data['email'][-10:] != '@emory.edu':
            context['errors'] = 'Sorry! This service is only available within Emory University.'
            return render(request, 'signup.html', context)

        # A user already exists with this email
        if SiteUser.objects.filter(email=form.cleaned_data['email']).count():
            context['errors'] = 'A user already exists with this email.'
            return render(request, 'signup.html', context)

        # Create the new user
        '''
            If we are going to add email authentication, this would be the place to add it.
            I believe this requires messing around with some Django stuff though, so I'm
            going to leave it for later.
        '''
        email = form.cleaned_data['email']
        password = form.clean_retype_password()
        form.save()
        user = authenticate(email=email, password=password)
        login(request, user)  # Log the user in
        return HttpResponseRedirect(reverse('index'))  # Redirect them to the home page
    context['form'] = form
    return render(request, 'signup.html', context)




@user_passes_test(is_normal_user_check)
def agreement(request):
    ''' Agree to the form '''
    context = {}
    user = SiteUser.objects.get(email=request.user.email)
    if request.GET.get('next', False):
        next = request.GET.get('next', False)
        context['next'] = next
    elif request.POST.get('next', False):
        next = request.POST.get('next', False)
        context['next'] = next
    else:
        next = reverse('index')
    if request.POST:
        form = AgreementForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(next)
    else:
        form = AgreementForm(instance=user)
    context['form'] = form
    return render(request, 'agreement.html', context)


@user_passes_test(is_normal_user_check, login_url='/agreement/')
def auth_logout(request):
    context = {}
    logout(request)
    return render(request, 'logout.html', context)


def has_agreed(user):
    if user.is_authenticated():
        if user.is_site_admin:
            return False
        else:
            return user.agreed_to_form
    else:
        return False


@user_passes_test(has_agreed, login_url='/agreement/')
def reviewer_home(request):
    context = {}
    context['period'] = get_current_review_period()
    return render(request, 'reviewer_home.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def remove_associated_file(request, fid):
    print 'hit this'
    if request.is_ajax():
        context = {}
        f = ManuscriptFile.objects.get(id=fid)
        f.delete()
        context['msg'] = 'Deleted manuscript file'
        return HttpResponse(json.dumps(context), content_type="application/json")
    else:
        return Http404


@user_passes_test(has_agreed, login_url='/agreement/')
def submit_manuscript(request, mid):
    context = {}
    manuscript = Manuscript.objects.get(id=mid)
    manuscript.status = 'Submitted'
    manuscript.review_period = ReviewPeriod.objects.filter(is_current=True)[0]
    manuscript.save()
    context['period'] = ReviewPeriod.objects.filter(is_current=True)
    context['manuscript'] = manuscript
    return render(request, 'submit_manuscript.html', context)

@user_passes_test(has_agreed, login_url='/agreement/')
def delete_manuscript(request,mid):
    context = {}
    manuscript = Manuscript.objects.get(id=mid)
    manuscript.delete()
    manuscript.save()
    context['manuscript'] = manuscript
    context['period'] = get_current_review_period()
    return render(request, 'delete_manuscript.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def edit_manuscript(request, mid):
	context = {}

	# If the user has made changes
	if 'submitbutton' in request.POST:
		# Need to write method to update form and associated files
		man = Manuscript.objects.get(id=request.POST['id'])
		form = UploadManuscript(request.POST, instance=man)
		if form.is_valid():
			form.save()

		saved_files = handle_uploads(request)
		for f in saved_files:
			m = ManuscriptFile.objects.create(filename=f[0], upload=f[1], manuscript=man)
			m.save()
		context['period'] = get_current_review_period()
		return render(request,'uploader_home.html',context)
	else:

		#Get the current user and the manuscript being edited
		user = SiteUser.objects.get(email=request.user.email)
		manuscript = Manuscript.objects.get(id=mid)

		# Make sure the manuscript they're trying to edit is theirs and that it can be edited
		if user not in manuscript.authors.all():
			context['error'] = 'You are not authorized to make changes to this manuscript.'
			return render(request, 'edit_manuscript.html', context)
		elif manuscript.is_final:
			context['error'] = 'This manuscript can no longer be edited.'
			return render(request, 'edit_manuscript.html', context)

		form = UploadManuscript(instance=manuscript)
		context['form'] = form

		files = ManuscriptFile.objects.filter(manuscript=manuscript)
		context['files'] = files

		context['manuscript'] = manuscript
		context['period'] = get_current_review_period()
		return render(request, 'edit_manuscript.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def browse_manuscripts(request, current_page):
    context = {}
    # Load all available manuscripts
    all_manuscripts = Manuscript.objects.all()

    # Create a paginator with the manuscripts
    paginator = Paginator(all_manuscripts, 10)

    try:
        page = paginator.page(current_page)
    except PageNotAnInteger:
        page = paginator.page(1)
    except EmptyPage:
        page = paginator.page(paginator.num_pages)

    context['page'] = page
    context['period'] = get_current_review_period()
    return render(request, 'browse_manuscripts.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def assigned_manuscripts(request, current_page):
    context = {}
    context['period'] = get_current_review_period()

    # Load the current user and get the manuscripts for which they are a reviewer
    user = SiteUser.objects.get(email=request.user.email)
    manuscripts_assigned = Manuscript.objects.filter(reviewers__in=[user]).all()

    if request.FILES:
        mid = request.POST.get('manid')
        man = Manuscript.objects.get(id=mid)
        saved_file = handle_reviewer_uploads(request)
        r = ReviewFile.objects.create(filename=saved_file[0], upload=saved_file[1], manuscript=man)
        r.save()
        man.reviewdocs = [r]
        man.save()

    # Create a paginator
    paginator = Paginator(manuscripts_assigned, 10)

    try:
        page = paginator.page(current_page)
    except PageNotAnInteger:
        page = paginator.page(1)
    except EmptyPage:
        page = paginator.page(paginator.num_pages)

    context['page'] = page
    context['period'] = get_current_review_period()
    return render(request, 'assigned_manuscripts.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def author_home(request):
    context = {}
    context['period'] = get_current_review_period()
    return render(request, 'uploader_home.html', context)


@user_passes_test(has_agreed, login_url='/agreement/')
def upload_manuscript(request):
    context = {}
    context['period'] = get_current_review_period()
    if request.POST:
        form = UploadManuscript(request.POST)

        if form.is_valid():
            man = form.save()

            # Set current user as author
            current_user = SiteUser.objects.get(email=request.user.email)
            man.authors = [current_user]
            man.review_period = get_current_review_period()
            man.save()
            saved_files = handle_uploads(request)
            for f in saved_files:
                m = ManuscriptFile.objects.create(filename=f[0], upload=f[1], manuscript=man)
                m.save()

            # If successful, redirect to main page
            return HttpResponseRedirect(reverse('authorhome'))
    else:
        form = UploadManuscript()
    context['form'] = form
    return render(request, 'upload_manuscript.html', context)


@user_passes_test(is_normal_user_)
def account(request):
    context = {}
    user = SiteUser.objects.get(email=request.user.email)
    if 'delete' in request.POST:
        print 'Deleting account ' + str(user)
        logout(request)
        user.delete()
        return HttpResponseRedirect(reverse('index'))
    if 'savebutton' in request.POST:
        form = AccountForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            context['errors'] = 'Information saved.'
        return HttpResponseRedirect(reverse('index'))
    else:
        form = AccountForm(instance=user)
    context['form'] = form
    return render(request, 'account.html', context)


@login_required
def auth_admin(request):
	context = {}
	user = SiteUser.objects.get(email=request.user.email)
	if user.email != 'b.k.bolte@emory.edu': # Update admin authentication at some point
		return HttpResponseRedirect(reverse('index'))
	context['all_users'] = SiteUser.objects.all()
	return render(request, 'admin_home.html', context)

def is_site_admin_check(user):
	if user.is_authenticated():
		return user.is_site_admin
	else:
		return False

def admin_login(request):
	context = {}
	if request.method == 'POST': form = AdminLoginForm(request.POST)
	else: form = AdminLoginForm()
	if form.is_valid() and 'email' in form.cleaned_data and 'password' in form.cleaned_data:
		user = authenticate(username=form.cleaned_data['email'], password=form.cleaned_data['password'])
		if user is not None:
			login(request, user)
			return HttpResponseRedirect(reverse('admin_homepage')) # Redirect to homepage when the user logs in
		else:
			print 'hit 3'
			context['errors'] = 'Authentication failed.'
			
	if request.method == 'POST' and not(form.is_valid()):	
		context['errors'] = 'User name or password cannot be empty.'

	context['form'] = form
	return render_to_response('admin_login.html', context, context_instance=RequestContext(request))

@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_homepage(request):
	context_dict = {}

	period = ReviewPeriod.objects.filter(is_current=True)
	if len(period) != 0:
		submission_deadline = period[0].submission_deadline
		review_deadline = period[0].review_deadline
		group_meeting_time = period[0].group_meeting_time
		group_meeting_venue = period[0].group_meeting_venue
	else:
		submission_deadline = ''
		review_deadline = ''
		group_meeting_time = ''
		group_meeting_venue = ''

	context_dict['submission_deadline'] = submission_deadline
	context_dict['review_deadline'] = review_deadline
	context_dict['group_meeting_time'] = group_meeting_time
	context_dict['group_meeting_venue'] = group_meeting_venue
	return render_to_response('admin_homepage.html', context_dict, RequestContext(request))

class MatchedManuscript():
	manuscript = Manuscript
	
	def __init__(self):
		self.recommended_reviewers = []

	def add(self, reviewer):
		self.recommended_reviewers.append(reviewer)

#view to handle admin confirm final decision ajax call
@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_confirm_ajax(request):
	try:
		if request.POST.has_key('manuscript_id'):
			manuscript_id = request.POST.get('manuscript_id')
			manuscript = Manuscript.objects.get(id=manuscript_id)
			manuscript.is_final = True
			manuscript.save()
		
			response_dict = {}
			reviewers_dict = {}
			for reviewer in manuscript.reviewers.all():
				reviewers_dict[reviewer.email] = {'name':reviewer.first_name + ' ' + reviewer.last_name + reviewer.star_string}

			author = manuscript.authors.all()[0]
			response_dict['manuscript'] = {'title':manuscript.brief_title, 'id':manuscript.id, 'author':author.first_name + ' ' + author.last_name + author.star_string}
			response_dict['reviewers'] = reviewers_dict
			response_dict['success'] = 'true'
			

	except KeyError:
		return HttpResponse(json.dumps({'error': 'true', 'code': 'KeyError'}), content_type='application/json')
		
	return HttpResponse(json.dumps(response_dict), content_type='application/json')

#view to handle admin submit final decision ajax call
@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_submit_ajax(request):
	try:
		if request.POST.has_key('manuscript_id'):
			manuscript_id = request.POST.get('manuscript_id')
			manuscript = Manuscript.objects.get(id=manuscript_id)
		
			response_dict = {}			
			reviewer_dict = {}
			for reviewer in manuscript.reviewers.all():
				reviewer_dict[reviewer.email] = {'name':reviewer.first_name + ' ' + reviewer.last_name + reviewer.star_string, 'email':reviewer.email, 'id':reviewer.id}

			response_dict['reviewers'] = reviewer_dict
			response_dict['constraint'] = manuscript.warning
			response_dict['success'] = 'true'

	except KeyError:
		return HttpResponse(json.dumps({'error': 'true', 'code': 'KeyError'}), content_type='application/json')
	
	return 	HttpResponse(json.dumps(response_dict), content_type='application/json')

#view to handle admin edit ajax call 
@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_ajax(request):
	try:
		if request.POST.has_key('manuscript_id'):
			manuscript_id = request.POST.get('manuscript_id')
			manuscript = Manuscript.objects.get(id=manuscript_id)

			#get new set of reviewers
			if request.POST.has_key('reviewers'):
				reviewers = request.POST.get('reviewers').split(',')
				reviewers.pop()

				#store the new set of reviewers
				manuscript.reviewers.clear()
				for reviewer in reviewers:
					manuscript.reviewers.add(SiteUser.objects.get(email=reviewer))
				response_dict = {}
				assigned_dict = {} 
				recommend_dict = {}

				for reviewer in manuscript.reviewers.all():
					assigned_dict[reviewer.email] = {'name':reviewer.first_name + ' ' + reviewer.last_name + reviewer.star_string, 'email':reviewer.email, 'id':reviewer.id}

				for reviewer in manuscript.recommended_reviewers:
					recommend_dict[reviewer.email] = {'name':reviewer.first_name + ' ' + reviewer.last_name + reviewer.star_string, 'email':reviewer.email, 'id':reviewer.id}

				response_dict['assigned'] = assigned_dict
				response_dict['recommend'] = recommend_dict
				response_dict['constraint'] = manuscript.warning
				response_dict['success'] = 'true'

	except KeyError:
		return HttpResponse(json.dumps({'error': 'true', 'code': 'KeyError'}), content_type='application/json')

	return HttpResponse(json.dumps(response_dict), content_type='application/json')

@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_browselist(request):
	context_dict = {}
	manuscripts = []
		
	manuscripts_all = Manuscript.objects.all()

	#get current period
	period = ReviewPeriod.objects.filter(is_current=True)
	if len(period) != 0:
		submission_deadline = period[0].submission_deadline
		review_deadline = period[0].review_deadline
		group_meeting_time = period[0].group_meeting_time
		group_meeting_venue = period[0].group_meeting_venue

		#review period constrain
		for manuscript in manuscripts_all:
			if manuscript.review_period.is_current:
				if manuscript.review_period.review_deadline < timezone.now():
					manuscript.is_final = True
					manuscript.save()
				manuscripts.append(manuscript)	
	else:
		submission_deadline = ''
		review_deadline = ''
		group_meeting_time = ''
		group_meeting_venue = ''



	reviewers = SiteUser.objects.filter(agreed_to_form=True)

	context_dict['manuscripts'] = manuscripts
	context_dict['reviewers'] = reviewers
	context_dict['submission_deadline'] = submission_deadline
	context_dict['review_deadline'] = review_deadline
	context_dict['group_meeting_time'] = group_meeting_time
	context_dict['group_meeting_venue'] = group_meeting_venue
	return render_to_response('admin_browselist.html', context_dict, RequestContext(request))	


@user_passes_test(is_site_admin_check, login_url='/admin_login')
def manuscript_detail(request, pk):
	manuscript = get_object_or_404(Manuscript, pk=pk)
	return render_to_response('manuscript_detail.html', {'manuscript': manuscript}, RequestContext(request))

@user_passes_test(is_site_admin_check, login_url='/admin_login')
def user_detail(request, pk):
	user = get_object_or_404(SiteUser, pk=pk)
	return render_to_response('user_detail.html', {'user': user}, RequestContext(request))

#admin setting controller
@user_passes_test(is_site_admin_check, login_url='/admin_login')
def setting(request):
	if request.method == 'POST':
		form = ReviewPeriodForm(request.POST)
		if form.is_valid():
			for period in ReviewPeriod.objects.all():
				period.is_current = False
				period.save()

			#ReviewPeriod.objects.all().delete();
			period = form.save(commit=True)
			period.is_current = True
			period.save()

			#clear the assigned manuscripts from all reviewers
			manuscripts = Manuscript.objects.all()
			for manuscript in manuscripts:
				manuscript.reviewers.clear()

			for period in ReviewPeriod.objects.all():
				print period.is_current
			return render_to_response('setting_ok.html', {"period":period}, RequestContext(request))
		else:
			print form.errors
	else:
		period = ReviewPeriod.objects.filter(is_current=True)[0];
		form = ReviewPeriodForm(instance=period)

	return render_to_response('setting.html', {'form': form}, RequestContext(request))

def admin_help(request):
    return render(request,'admin_help.html',{})
	
@user_passes_test(is_site_admin_check, login_url='/admin_login')
def admin_logout(request):
	context = {}
	logout(request)
	return HttpResponseRedirect('/admin_login')



